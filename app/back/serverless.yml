frameworkVersion: '3'

service: tech10-back

plugins:
  - serverless-esbuild
  - serverless-offline

# デプロイ用のパッケージの作成に関するオプションを指定できます。
package:
  individually: true

# ユーザーが任意のカスタム変数や設定を保存するための場所として機能します。
# customセクションで定義された変数は、serverless.ymlの他の部分で参照できます。
# また、多くのプラグインがカスタム設定をこのセクション内で要求します。
custom:
  defaultStage: dev
  # environment:
  #   dev: ${file(../env/dev.yml)}
  #  JavaScript、TypeScript、およびJSXのための超高速なバンドラーとミニファイア
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: ['aws-sdk']
    target: 'node18'
    define: { 'require.resolve': undefined }
    platform: 'node'
    concurrency: 10
    watch:
      pattern: ['src/**/*.ts'] # コンパイル対象のディレクトリを指定する
      ignore: ['temp/**/*'] # コンパイル対象外のディレクトリを指定する
  dynamodb:
    stages:
      - dev
    start:
      inMemory: true
      port: 8000
      migrate: true
    table:
      - 'ecsite-${sls:stage}'
    gsi:
      - GSI-General
      - GSI-OwnerGoodsList
  serverless-offline:
    httpPort: 3001

# サービスプロバイダーの詳細（AWS、Azure、Google Cloudなど）。
# ランタイム、リージョン、認証プロファイル、環境変数などもここで設定します。
provider:
  name: aws
  runtime: nodejs18.x
  region: ap-northeast-1
  stage: ${opt:stage, self:custom.defaultStage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:BatchWriteItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ECSiteTable, Arn]
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.table.0}/index/*'
  environment:
    REGION: ${self:provider.region}
    TABLE_NAME: ${self:custom.dynamodb.table.0}
    GSI_GENERAL: ${self:custom.dynamodb.gsi.0}
    GSI_OWNERGOODSLIST: ${self:custom.dynamodb.gsi.1}

# このセクションには、サービスで定義するすべての関数が含まれます。
# 各関数は、実行するハンドラと、関数をトリガするイベント（HTTPリクエスト、S3バケットの変更など）を指定します。
functions:
  app:
    handler: src/handler.handler
    events:
      - http:
          method: ANY
          path: api/v1
          cors: true
      - http:
          method: ANY
          path: api/v1/{any+}
          cors: true

# AWS CloudFormationテンプレートの形式で、AWSのリソース（DynamoDBテーブル、S3バケットなど）を直接定義することができます。
resources:
  Resources:
    ECSiteTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodb.table.0}
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
          - AttributeName: type
            AttributeType: S
          - AttributeName: value
            AttributeType: S
          - AttributeName: ownerid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
          - AttributeName: type
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.dynamodb.gsi.0}
            KeySchema:
              - AttributeName: type
                KeyType: HASH
              - AttributeName: value
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
          - IndexName: ${self:custom.dynamodb.gsi.1}
            KeySchema:
              - AttributeName: ownerid
                KeyType: HASH
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - 'key'
                - 'value'
