openapi: "3.0.3"

info:
  title: "Memo API Spec"
  description: |-
    Memo API Specification.</br>
  version: "1.0.0"

servers:
  - url: https://api.example.com/api/v1
    description: production
  - url: https://{environment}.api.example.com/api/v1
    variables:
      environment:
        default: dev
        enum:
          - dev
          - staging
    description: develop
  - url: "{protocol}://{host}:{port}/api/v1"
    description: local
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
      port:
        enum:
          - "443"
          - "8443"
        default: "443"

tags:
  - name: Memo
    description: Access to user model.

paths:
  /memos:
    post:
      tags:
        - "Memo"
      summary: CreateMemo
      description: |-
        Create a memo.
      requestBody:
        $ref: "#/components/requestBodies/CreateUserRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/CreateUserResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
    get:
      tags:
        - "Memo"
      summary: GetMemos
      description: |-
        Search for a memos and get a list.
      responses:
        "200":
          $ref: "#/components/responses/GetUsersResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /memos/{id}:
    parameters:
      - $ref: "#/components/parameters/UserIdParameter"
    get:
      tags:
        - "Memo"
      summary: GetMemoById
      description: |-
        Get memo by id.
      responses:
        "200":
          $ref: "#/components/responses/GetUserResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
    put:
      tags:
        - "Memo"
      summary: UpdateMemoById
      description: |-
        Update memo by id.
      parameters:
        - $ref: "#/components/parameters/VersionParameter"
      requestBody:
        $ref: "#/components/requestBodies/UpdateUserRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/CreateUserResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "409":
          $ref: "#/components/responses/ConflictErrorResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
    delete:
      tags:
        - "Memo"
      summary: DeleteMemoById
      description: |-
        Delete memo by id.
      parameters:
        - $ref: "#/components/parameters/VersionParameter"
      responses:
        "200":
          $ref: "#/components/responses/CreateUserResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "409":
          $ref: "#/components/responses/ConflictErrorResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

components:
  #-------------------------------
  # Reusable schemas
  #-------------------------------
  schemas:
    MemoModel:
      description: Memo model
      required:
        - id
        - title
        - mainText
      type: object
      properties:
        id:
          title: id
          type: string
          example: 5fc03e91-8908-8a2e-7ca0-7d048b939ed2
        title:
          title: Memo title
          type: string
          example: 今日のタスクリスト
        mainText:
          title: Memo main text
          type: string
          example: 「今日のタスクリスト」は、1日の作業予定を整理するためのメモ帳アプリの一覧画面です。ユーザーは、タスクを追加し、重要度に応じて優先順位を設定することができます。また、タスクが完了した場合は、チェックボックスをクリックしてマークすることができます。リストには、追加された順番にタスクが表示され、ユーザーは自由に編集、削除することができます。

    TimeStampsModel:
      description: TimeStamps Model
      required:
        - createAt
        - version
      type: object
      properties:
        createAt:
          title: Created datetime.
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        updateAt:
          title: Updated datetime.
          type: string
          format: date-time
          example: 2020-09-12T01:41:23Z
        version:
          title: Optimistic lock key.
          type: integer
          minimum: 1
          default: 1

    PaginationModel:
      description: Pagination model
      required:
        - page
        - total
      type: object
      properties:
        page:
          title: Page number.
          type: integer
          minimum: 1
          example: 1
        total:
          title: Total count.
          type: integer
          minimum: 0
          example: 10

    ErrorModel:
      description: Response Error Model.
      required:
        - code
        - message
      type: object
      properties:
        code:
          title: error code
          type: string
          example: 500
        message:
          title: error message
          type: string
          example: Internal Server Error.

  #-------------------------------
  # Reusable operation parameters
  #-------------------------------
  parameters:
    UserIdParameter:
      name: id
      in: path
      description: User id.
      required: true
      schema:
        type: string
        format: uuid4
      example: cfe43609-4c38-d52d-44ff-66bf2bc2d5c2

    VersionParameter:
      name: version
      in: query
      description: Optimistic lock key.
      required: true
      schema:
        type: integer
        default: 1
      example: 1

    LimitParameter:
      name: limit
      in: query
      description: Limit one page.
      schema:
        type: integer
        default: 20
      example: 20

    OffsetParameter:
      name: offset
      in: query
      description: Offset page.
      schema:
        type: integer
        default: 0
      example: 100

  #-------------------------------
  # Reusable request body
  #-------------------------------
  requestBodies:
    CreateUserRequestBody:
      description: Memo data
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MemoModel"

    UpdateUserRequestBody:
      description: user data
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/MemoModel"
              - properties:
                  email:
                    readOnly: true

  #-------------------------------
  # Reusable responses
  #-------------------------------
  responses:
    GetUsersResponse:
      description: User lists
      content:
        application/json:
          schema:
            allOf:
              - required:
                  - memos
              - type: object
              - properties:
                  memos:
                    type: array
                    example:
                      - id: 2c6e239a-f02b-d158-2833-c7f883bb5530
                        title: 今日のタスクリスト
                        mainText: 「今日のタスクリスト」は、1日の作業予定を整理するためのメモ帳アプリの一覧画面です。ユーザーは、タスクを追加し、重要度に応じて優先順位を設定することができます。また、タスクが完了した場合は、チェックボックスをクリックしてマークすることができます。リストには、追加された順番にタスクが表示され、ユーザーは自由に編集、削除することができます。
                        createAt: 2020-09-12T01:41:23.000Z
                        update_at: 2020-09-12T01:41:23.000Z
                        version: 1
                      - id: 5fc03e91-8908-8a2e-7ca0-7d048b939ed2
                        title: お気に入りレシピ
                        mainText: 美味しい料理のコレクション。メインディッシュから魅惑的なデザートまで、あなたのために厳選しました。お楽しみください！
                        createAt: 2020-09-12T01:41:23.000Z
                        update_at: 2020-09-12T01:41:23.000Z
                        version: 1
                      - id: 0e0b75df-7b28-67cd-5740-5b788b4868af
                        title: ワークアウトプラン
                        mainText: 筋力トレーニング、有酸素運動、ストレッチなど、バランスの取れたフィットネスプラン。健康的な身体を作るための指示を提供します。一緒に頑張りましょう！
                        createAt: 2020-09-12T01:41:23.000Z
                        update_at: 2020-09-12T01:41:23.000Z
                        version: 1

    GetUserResponse:
      description: Got user.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/MemoModel"
              - $ref: "#/components/schemas/TimeStampsModel"

    CreateUserResponse:
      description: Created user.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/MemoModel"
              - $ref: "#/components/schemas/TimeStampsModel"

    BadRequestResponse:
      description: |
        Bad Request.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorModel"
            properties:
              code:
                example: 400
              message:
                example: Bad Request.

    UnauthorizedResponse:
      description: |
        Unauthorized.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorModel"
            properties:
              code:
                example: 401
              message:
                example: Unauthorized.

    ForbiddenResponse:
      description: |
        Forbidden.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorModel"
            properties:
              code:
                example: 403
              message:
                example: Forbidden.

    NotFoundResponse:
      description: |
        Not Found.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorModel"
            properties:
              code:
                example: 404
              message:
                example: Not Found.

    ConflictErrorResponse:
      description: |
        Conflict.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorModel"
            properties:
              code:
                example: 409
              message:
                example: Conflict.

    InternalServerErrorResponse:
      description: |-
        Internal Server Error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorModel"

  #-------------------------------
  # Reusable security
  #-------------------------------
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      description: JWT Token Authentication
    apikey:
      type: apiKey
      name: x-api-key
      in: header
      description: API Key Authentication
    basicAuth:
      type: http
      scheme: basic
      description: Basic Authentication
