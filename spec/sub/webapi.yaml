openapi: 3.0.0

info:
  title: ECSite API
  description: エンドポイントの命名にはケバブケース、小文字、複数形を採用。
  version: 1.0.0

servers:
  - url: http://localhost:3001/local/api/v1
    description: localhost
  - url: https://r2a4d8x5za.execute-api.ap-northeast-1.amazonaws.com/dev/api/v1
    description: dev server

tags:
  - name: meta
    description: メタ情報
  - name: users
    description: ユーザー情報
  - name: products
    description: 商品情報
  - name: orders
    description: 注文情報

paths:
  /public/health:
    get:
      tags:
        - meta
      summary: 疎通確認をする。
      description: 疎通確認をする。
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
                example: Hello World!!

  /private/presigned-url/upload:
    get:
      tags:
        - meta
      summary: S3 PresignedURL(アップロード用)を取得する。
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/FileName"
        - $ref: "#/components/parameters/FileType"
      description: S3 PresignedURL(アップロード用)を取得する。
      operationId: presignedUrl
      responses:
        "200":
          $ref: "#/components/responses/PresignedURL"
        "400":
          description: 不正な入力パラメータ
        "500":
          description: サーバーサイドエラー

  /private/presigned-url/download:
    get:
      tags:
        - meta
      summary: S3 PresignedURL(ダウンロード用)を取得する。
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/FileName"
      description: S3 PresignedURL(ダウンロード用)を取得する。
      operationId: presignedUrl
      responses:
        "200":
          $ref: "#/components/responses/PresignedURL"
        "400":
          description: 不正な入力パラメータ
        "500":
          description: サーバーサイドエラー

  /public/users/signup:
    post:
      summary: ユーザー情報を新規登録する。
      description: Cognitoのユーザープールに新規ユーザアカウントを登録する。
      tags:
        - users
      operationId: signUp
      requestBody:
        $ref: "#/components/requestBodies/Signup"
      responses:
        "200":
          description: 成功
        "400":
          description: 不正な入力パラメータ

  /public/users/confirm-signup:
    post:
      summary: ユーザーを有効化する。
      description: ユーザーが入力したチャレンジレスポンスを送信し、Cognitoが管理するユーザーを有効化する。
      tags:
        - users
      operationId: activate
      requestBody:
        $ref: "#/components/requestBodies/UserConfirm"
      responses:
        "200":
          description: 成功
        "400":
          description: 不正な入力パラメータ

  /public/users/signin:
    post:
      summary: ユーザーのログインを行う。
      description: 要求されたユーザー情報とCognitoのユーザープールに登録された情報を検証する。
      tags:
        - users
      operationId: signIn
      requestBody:
        $ref: "#/components/requestBodies/Signin"
      responses:
        "200":
          $ref: "#/components/responses/Signin"
        "400":
          description: Bad Request
        "401":
          description: 認証に失敗した。

  /private/products/:
    post:
      tags:
        - products
      summary: 商品情報を新規登録する。
      parameters:
        - $ref: "#/components/parameters/Authorization"
      requestBody:
        $ref: "#/components/requestBodies/Product"
      responses:
        "201":
          $ref: "#/components/responses/Product"
    get:
      tags:
        - products
      summary: 商品情報の一覧を取得する。
      parameters:
        - $ref: "#/components/parameters/Authorization"
      responses:
        "200":
          $ref: "#/components/responses/ProductList"

  /private/products/{id}:
    get:
      tags:
        - products
      summary: 指定されたIDの商品情報を取得する。
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          $ref: "#/components/responses/ProductDetail"
    put:
      tags:
        - products
      summary: 指定されたIDの商品情報を更新する。
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Id"
      requestBody:
        $ref: "#/components/requestBodies/Product"
      responses:
        "204":
          description: 更新成功
    delete:
      tags:
        - products
      summary: 指定されたIDの商品情報を削除する。
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Id"
      responses:
        "204":
          description: 削除成功

  /private/orders/:
    post:
      tags:
        - orders
      summary: 注文情報を新規登録する。
      parameters:
        - $ref: "#/components/parameters/Authorization"
      requestBody:
        $ref: "#/components/requestBodies/Order"
      responses:
        "201":
          $ref: "#/components/responses/Order"
    get:
      tags:
        - orders
      summary: 注文情報の一覧を取得する。
      parameters:
        - $ref: "#/components/parameters/Authorization"
      responses:
        "200":
          $ref: "#/components/responses/OrderList"

  /private/orders/{id}:
    get:
      tags:
        - orders
      summary: 指定されたIDの注文情報を取得する。
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          $ref: "#/components/responses/OrderDetail"
    put:
      tags:
        - orders
      summary: 指定されたIDの注文情報を更新する。
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Id"
      requestBody:
        $ref: "#/components/requestBodies/Order"
      responses:
        "204":
          description: 更新成功
    delete:
      tags:
        - orders
      summary: 指定されたIDの注文情報を削除する。
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Id"
      responses:
        "204":
          description: 削除成功

components:
  schemas:
    ID:
      type: object
      properties:
        id:
          type: string
          description: 一意に識別するための番号。
      required:
        - id
    Date:
      type: object
      properties:
        createAt:
          type: string
          description: 作成日時。
        updateAt:
          type: string
          description: 更新日時。
      required:
        - createAt
        - updateAt
    ProductDetail:
      type: object
      properties:
        name:
          type: string
          description: 商品名。ユーザーが商品を検索や認識するための名前。
        price:
          type: number
          description: 商品の販売価格。
        image:
          type: array
          items:
            description: 商品の実際の見た目を示す画像(写真やイラスト)のファイル名。
            type: string
        explanation:
          type: string
          description: 商品説明。商品の詳細な情報や特徴を説明するテキスト。
        category:
          type: string
          description: 商品の分類。例：「家電」「ファッション」「食品」など。
      required:
        - name
        - price
        - image
        - owner
    ProductsList:
      type: object
      properties:
        id:
          type: number
          description: 商品ID。各商品を一意に識別するための番号やコード。
        owner:
          type: string
          description: 商品の販売者。
        name:
          type: string
          description: 商品名。ユーザーが商品を検索や認識するための名前。
        price:
          type: number
          description: 商品の販売価格。
        image:
          type: string
          description: 商品の実際の見た目を示す画像(写真やイラスト)のファイル名(メイン画像)。
      required:
        - id
        - owner
        - name
        - price
        - image
    OrderDetail:
      type: object
      properties:
        productId:
          type: string
          description: 注文対象の商品ID。
        price:
          type: number
          description: 商品の販売価格。
        quantity:
          type: number
          description: 商品の注文個数。
      required:
        - productId
        - price
        - quantity

  requestBodies:
    Product:
      description: 商品情報の詳細
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductDetail"
          example:
            name: りんご
            price: 100
            image:
              - 20230928T073511479_Apple.jpeg
              - 20230928T073511479_Apple.jpeg
              - 20230928T073511479_Apple.jpeg
            owner: さとう
            explanation: りんごは、数ある果物の中でも人々に広く親しまれているものの一つです。
            category: Food
    Order:
      description: 注文情報の詳細
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderDetail"
          example:
            - productId: ac79f107-4db1-4a88-bd7d-306537fa8b22
              price: 100
              quantity: 5
            - productId: rc19f107-as-4a88-bd73-306b37fa8b22
              price: 200
              quantity: 15
    Signup:
      description: サインアップ情報
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
                format: email
              password:
                type: string
                format: password
              role:
                type: string
            required:
              - name
              - email
              - password
              - role
            example:
              name: customer1
              email: customer1@test.com
              password: F123i12
              role: customer
    UserConfirm:
      description: ユーザー有効化情報
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              confirmationCode:
                type: string
            required:
              - name
              - confirmationCode
          example:
            name: samlple
            confirmationCode: 752763
    Signin:
      description: サインイン情報
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              password:
                type: string
                format: password
            required:
              - name
              - password
          example:
            name: samlple
            password: a1faS112

  responses:
    PresignedURL:
      description: S3 PresignedURLの生成に成功。
      content:
        application/json:
          schema:
            type: object
            properties:
              presignedUrl:
                type: string
    Signin:
      description: サインイン成功。
      content:
        application/json:
          schema:
            type: object
            properties:
              accessToken:
                type: string
              idToken:
                type: string
              refreshToken:
                type: string
    Product:
      description: 登録成功
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ID"
              - $ref: "#/components/schemas/Date"
            example:
              id: 12345
              createAt: 20230828T050442+0900
              updateAt: 20230828T050442+0900
    ProductList:
      description: 商品情報の一覧
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ProductsList"
          example:
            - id: 12345
              owner: さとう
              name: りんご
              price: 100
              image: 20230928T073511479_Apple.jpeg
            - id: 12777
              owner: さとう
              name: コーヒー
              price: 200
              image: 20240104T123553572_Coffee.jpeg
    ProductDetail:
      description: 商品詳細
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ID"
              - $ref: "#/components/schemas/ProductDetail"
            example:
              id: 12345
              name: りんご
              price: 100
              image:
                - 20230928T073511479_Apple.jpeg
                - 20230928T070000000_Apple.jpeg
                - 20240000T120000000_Apple.jpeg
              owner: さとう
              explanation: りんごは、数ある果物の中でも人々に広く親しまれているものの一つです。
              category: food
    Order:
      description: 登録成功
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ID"
          example:
            id: 12345
    OrderList:
      description: 注文情報の一覧
      content:
        application/json:
          schema:
            type: array
            items:
              allOf:
                - $ref: "#/components/schemas/ID"
                - $ref: "#/components/schemas/Date"
          example:
            - id: 12345
              createAt: 20230828T050442+0900
              updateAt: 20230828T050442+0900
            - id: 31234
              createAt: 20230828T050442+0900
              updateAt: 20230828T050442+0900
    OrderDetail:
      description: 注文詳細
      content:
        application/json:
          schema:
            type: object
            properties:
              customerId:
                type: string
                description: 顧客ID
                required:
                  - customerId
              detail:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/OrderDetail"
              data:
                $ref: "#/components/schemas/Date"
          example:
            customerId: matsuda
            detail:
              - productId: ac79f107-4db1-4a88-bd7d-306537fa8b22
                price: 100
                quantity: 5
              - productId: ac79f107-4db1-4a88-bd7d-306537fa8b22
                price: 100
                quantity: 5
            date:
              createAt: 20230828T050442+0900
              updateAt: 20230828T050442+0900

  parameters:
    Authorization:
      name: Authorization
      in: header
      required: true
      description: Bearerトークン
      schema:
        type: string
    Id:
      name: id
      in: path
      required: true
      description: 対象を一意に特定するID
      schema:
        type: string
    FileName:
      name: file-name
      in: query
      required: true
      description: ファイル名称
      schema:
        type: string
    FileType:
      name: file-type
      in: query
      required: true
      description: ファイルのコンテンツタイプ
      schema:
        type: string
